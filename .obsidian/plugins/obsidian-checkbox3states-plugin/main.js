/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ThirdState
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  touchduration: 300,
  baseColor: "#ff930a",
  hoverColor: "#c77a0f"
};
var timer;
var longTouchDone = false;
var ThirdState = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.onlongtouch = function(checkbox) {
      longTouchDone = true;
      if (checkbox.dataset.task !== "/") {
        checkbox.dataset.task = "/";
        Object(checkbox.closest(".HyperMD-list-line")).dataset.task = "/";
        "/";
      } else {
        checkbox.dataset.task = " ";
        Object(checkbox.closest(".HyperMD-list-line")).dataset.task = " ";
      }
      new import_obsidian.Notice("Third state checkbox toggled!");
    };
    this.onCheckBoxChange = function(checkbox) {
      if (checkbox.dataset.task !== "/") {
        checkbox.dataset.task = "/";
        Object(checkbox.closest(".HyperMD-list-line")).dataset.task = "/";
      } else {
        checkbox.dataset.task = " ";
        Object(checkbox.closest(".HyperMD-list-line")).dataset.task = " ";
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addStyle();
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      const checkbox = Object(evt.target);
      if (evt.shiftKey && checkbox.className === "task-list-item-checkbox") {
        evt.preventDefault();
        this.onCheckBoxChange(checkbox);
      }
    });
    this.registerDomEvent(document, "touchstart", (evt) => {
      const checkbox = Object(evt.target);
      if (checkbox.className === "task-list-item-checkbox") {
        timer = setTimeout(this.onlongtouch, this.settings.touchduration, checkbox);
      }
    }, { passive: false });
    this.registerDomEvent(document, "touchend", (evt) => {
      const checkbox = Object(evt.target);
      if (checkbox.className === "task-list-item-checkbox") {
        if (timer)
          clearTimeout(timer);
        if (longTouchDone) {
          evt.preventDefault();
          longTouchDone = false;
          return;
        }
      }
    });
  }
  onunload() {
    this.removeStyle();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.updateStyle();
  }
  addStyle() {
    const css = document.createElement("style");
    css.id = "checkbox-3-state";
    document.getElementsByTagName("head")[0].appendChild(css);
    this.updateStyle();
  }
  updateStyle() {
    const el = document.getElementById("checkbox-3-state");
    if (!el)
      throw "checkbox-3-state element not found!";
    else {
      el.innerText = ":root {--checkbox-3-state: " + this.settings.baseColor + ";--checkbox-3-state-accent: " + this.settings.hoverColor + ";--checkbox-marker-mid-color: var(--checkbox-3-state);--checkbox-marker-mid-color-hover: var(--checkbox-3-state-accent);}";
    }
  }
  removeStyle() {
    const element = document.getElementById("checkbox-3-state");
    if (element) {
      element.remove();
    }
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", {
      text: "Checkbox 3 states plugin - Settings"
    });
    new import_obsidian.Setting(containerEl).setName("About \u{1F44B}").setDesc("This plugin allows you to have a third state on the checkboxes of the task list. Do a [SHIFT]+[CLICK] on a checkbox to set this third state (not fully done). It adds a `/` instead of an `x` as a value. You can customize the colors below. Enjoy!");
    const baseColorCustomization = new import_obsidian.Setting(containerEl).setName("Third state base color").setDesc("The color of the checkbox Default value: " + DEFAULT_SETTINGS.baseColor);
    const baseColorPicker = new import_obsidian.ColorComponent(baseColorCustomization.controlEl).setValue(this.plugin.settings.baseColor).onChange(async (value) => {
      this.plugin.settings.baseColor = value;
      baseTextValue.setValue(value);
      await this.plugin.saveSettings();
      this.plugin.loadSettings();
    });
    const baseTextValue = new import_obsidian.TextComponent(baseColorCustomization.controlEl).setPlaceholder("Hexa value").setValue(this.plugin.settings.baseColor).onChange(async (value) => {
      this.plugin.settings.baseColor = value;
      baseColorPicker.setValue(value);
      await this.plugin.saveSettings();
    });
    baseColorCustomization.addButton((bt) => {
      bt.setButtonText("Default").onClick(async () => {
        this.plugin.settings.baseColor = DEFAULT_SETTINGS.baseColor;
        baseColorPicker.setValue(DEFAULT_SETTINGS.baseColor);
        baseTextValue.setValue(DEFAULT_SETTINGS.baseColor);
        await this.plugin.saveSettings();
        this.plugin.loadSettings();
      });
    });
    baseColorCustomization.components.push(baseColorPicker, baseTextValue);
    const hoverColorCustomization = new import_obsidian.Setting(containerEl).setName("Third state hover color").setDesc("The color of the checkbox when your cursor is over. Default value: " + DEFAULT_SETTINGS.hoverColor);
    const hoverColorPicker = new import_obsidian.ColorComponent(hoverColorCustomization.controlEl).setValue(this.plugin.settings.hoverColor).onChange(async (value) => {
      this.plugin.settings.hoverColor = value;
      hoverTextValue.setValue(value);
      await this.plugin.saveSettings();
      this.plugin.loadSettings();
    });
    const hoverTextValue = new import_obsidian.TextComponent(hoverColorCustomization.controlEl).setPlaceholder("Hexa value").setValue(this.plugin.settings.hoverColor).onChange(async (value) => {
      this.plugin.settings.hoverColor = value;
      hoverColorPicker.setValue(value);
      await this.plugin.saveSettings();
    });
    hoverColorCustomization.addButton((bt) => {
      bt.setButtonText("Default").onClick(async () => {
        this.plugin.settings.hoverColor = DEFAULT_SETTINGS.hoverColor;
        hoverColorPicker.setValue(DEFAULT_SETTINGS.hoverColor);
        hoverTextValue.setValue(DEFAULT_SETTINGS.hoverColor);
        await this.plugin.saveSettings();
        this.plugin.loadSettings();
      });
    });
    hoverColorCustomization.components.push(hoverColorPicker, hoverTextValue);
  }
};
//# sourceMappingURL=data:application/json;base64,
